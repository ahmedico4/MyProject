
Project_AMIT2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a54  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ff  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000591  00000000  00000000  00001507  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000480  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ea  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000027ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#define F_CPU 16000000UL
#include "util/delay.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	u8_t x;
	mdio_setPinStatus(PORTB,PIN4|PIN5|PIN7,OUTPUT);
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	60 eb       	ldi	r22, 0xB0	; 176
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	0e 94 75 00 	call	0xea	; 0xea <mdio_setPinStatus>
	mdio_setPinStatus(PORTB,PIN6,INPUT_FLOAT);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	60 e4       	ldi	r22, 0x40	; 64
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	0e 94 75 00 	call	0xea	; 0xea <mdio_setPinStatus>
	mdio_setPinStatus(PORTD,PIN3,OUTPUT);
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	68 e0       	ldi	r22, 0x08	; 8
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	0e 94 75 00 	call	0xea	; 0xea <mdio_setPinStatus>
	mdio_setPinStatus(PORTC,PIN2,OUTPUT);
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	64 e0       	ldi	r22, 0x04	; 4
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	0e 94 75 00 	call	0xea	; 0xea <mdio_setPinStatus>
	mspi_init(MSPI_SLAVE_DEVICE,MSPI_MSB_FIRST,MSPI_SAMPLE_R_SETUP_F,MSPI_CLK_PRE_64);
  9e:	25 e0       	ldi	r18, 0x05	; 5
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 1e 01 	call	0x23c	; 0x23c <mspi_init>
	
   while(1)
   {
	   mspi_slaveSendRecv(3, &x);
  aa:	be 01       	movw	r22, r28
  ac:	6f 5f       	subi	r22, 0xFF	; 255
  ae:	7f 4f       	sbci	r23, 0xFF	; 255
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	0e 94 2d 01 	call	0x25a	; 0x25a <mspi_slaveSendRecv>

	   if(x== 3)
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	51 f4       	brne	.+20     	; 0xd0 <main+0x64>
	   {
		   mdio_setPinValue(PORTD,PIN3,HIGH);
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	68 e0       	ldi	r22, 0x08	; 8
  c0:	0e 94 de 00 	call	0x1bc	; 0x1bc <mdio_setPinValue>
		   mdio_setPinValue(PORTC,PIN2,LOW);
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <mdio_setPinValue>
  ce:	ed cf       	rjmp	.-38     	; 0xaa <main+0x3e>
	   }
	   else if(x== 4)
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	59 f7       	brne	.-42     	; 0xaa <main+0x3e>
	   {
		   mdio_setPinValue(PORTC,PIN2,HIGH);
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	64 e0       	ldi	r22, 0x04	; 4
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 de 00 	call	0x1bc	; 0x1bc <mdio_setPinValue>
		   mdio_setPinValue(PORTD,PIN3,LOW);
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	68 e0       	ldi	r22, 0x08	; 8
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 de 00 	call	0x1bc	; 0x1bc <mdio_setPinValue>
  e8:	e0 cf       	rjmp	.-64     	; 0xaa <main+0x3e>

000000ea <mdio_setPinStatus>:
/************************************************************************/

void mdio_setPinStatus(u8_t au8_port, u8_t au8_pin, u8_t au8_status)
{
	/*Switching over GPIO Ports*/
	switch(au8_port)
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	f9 f0       	breq	.+62     	; 0x12c <mdio_setPinStatus+0x42>
  ee:	30 f0       	brcs	.+12     	; 0xfc <mdio_setPinStatus+0x12>
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	a1 f1       	breq	.+104    	; 0x15c <mdio_setPinStatus+0x72>
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	09 f4       	brne	.+2      	; 0xfa <mdio_setPinStatus+0x10>
  f8:	49 c0       	rjmp	.+146    	; 0x18c <mdio_setPinStatus+0xa2>
  fa:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
		
		/*Switching over pin status*/
		switch(au8_status)
  fc:	41 30       	cpi	r20, 0x01	; 1
  fe:	41 f0       	breq	.+16     	; 0x110 <mdio_setPinStatus+0x26>
 100:	18 f0       	brcs	.+6      	; 0x108 <mdio_setPinStatus+0x1e>
 102:	42 30       	cpi	r20, 0x02	; 2
 104:	51 f0       	breq	.+20     	; 0x11a <mdio_setPinStatus+0x30>
 106:	08 95       	ret
		{
			/*In case of OUTPUT*/
			case OUTPUT:
			
			/*Set the specified pins to 1 in DDR*/
			MDIO_DDRA |= au8_pin;
 108:	8a b3       	in	r24, 0x1a	; 26
 10a:	68 2b       	or	r22, r24
 10c:	6a bb       	out	0x1a, r22	; 26
			
			/*Break from this case*/
			break;
 10e:	08 95       	ret
			
			/*In case of INPUT_FLOAT*/
			case INPUT_FLOAT:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRA &= ~au8_pin;
 110:	8a b3       	in	r24, 0x1a	; 26
 112:	60 95       	com	r22
 114:	68 23       	and	r22, r24
 116:	6a bb       	out	0x1a, r22	; 26
			
			/*Break from this case*/
			break;
 118:	08 95       	ret

			/*In case of INPUT_PULLUP*/
			case INPUT_PULLUP:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRA &= ~au8_pin;
 11a:	8a b3       	in	r24, 0x1a	; 26
 11c:	96 2f       	mov	r25, r22
 11e:	90 95       	com	r25
 120:	89 23       	and	r24, r25
 122:	8a bb       	out	0x1a, r24	; 26

			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTA |= au8_pin;
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	68 2b       	or	r22, r24
 128:	6b bb       	out	0x1b, r22	; 27
			
			/*Break from this case*/
			break;
 12a:	08 95       	ret

		/*In case of PORTB*/
		case PORTB:
		
		/*Switching over pin status*/
		switch(au8_status)
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	41 f0       	breq	.+16     	; 0x140 <mdio_setPinStatus+0x56>
 130:	18 f0       	brcs	.+6      	; 0x138 <mdio_setPinStatus+0x4e>
 132:	42 30       	cpi	r20, 0x02	; 2
 134:	51 f0       	breq	.+20     	; 0x14a <mdio_setPinStatus+0x60>
 136:	08 95       	ret
		{
			/*In case of OUTPUT*/
			case OUTPUT:
			
			/*Set the specified pins to 1 in DDR*/
			MDIO_DDRB |= au8_pin;
 138:	87 b3       	in	r24, 0x17	; 23
 13a:	68 2b       	or	r22, r24
 13c:	67 bb       	out	0x17, r22	; 23
			
			/*Break from this case*/
			break;
 13e:	08 95       	ret
			
			/*In case of INPUT_FLOAT*/
			case INPUT_FLOAT:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRB &= ~au8_pin;
 140:	87 b3       	in	r24, 0x17	; 23
 142:	60 95       	com	r22
 144:	68 23       	and	r22, r24
 146:	67 bb       	out	0x17, r22	; 23
			
			/*Break from this case*/
			break;
 148:	08 95       	ret

			/*In case of INPUT_PULLUP*/
			case INPUT_PULLUP:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRB &= ~au8_pin;
 14a:	87 b3       	in	r24, 0x17	; 23
 14c:	96 2f       	mov	r25, r22
 14e:	90 95       	com	r25
 150:	89 23       	and	r24, r25
 152:	87 bb       	out	0x17, r24	; 23

			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTB |= au8_pin;
 154:	88 b3       	in	r24, 0x18	; 24
 156:	68 2b       	or	r22, r24
 158:	68 bb       	out	0x18, r22	; 24
			
			/*Break from this case*/
			break;
 15a:	08 95       	ret

		/*In case of PORTC*/
		case PORTC:
		
		/*Switching over pin status*/
		switch(au8_status)
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	41 f0       	breq	.+16     	; 0x170 <mdio_setPinStatus+0x86>
 160:	18 f0       	brcs	.+6      	; 0x168 <mdio_setPinStatus+0x7e>
 162:	42 30       	cpi	r20, 0x02	; 2
 164:	51 f0       	breq	.+20     	; 0x17a <mdio_setPinStatus+0x90>
 166:	08 95       	ret
		{
			/*In case of OUTPUT*/
			case OUTPUT:
			
			/*Set the specified pins to 1 in DDR*/
			MDIO_DDRC |= au8_pin;
 168:	84 b3       	in	r24, 0x14	; 20
 16a:	68 2b       	or	r22, r24
 16c:	64 bb       	out	0x14, r22	; 20
			
			/*Break from this case*/
			break;
 16e:	08 95       	ret
			
			/*In case of INPUT_FLOAT*/
			case INPUT_FLOAT:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRC &= ~au8_pin;
 170:	84 b3       	in	r24, 0x14	; 20
 172:	60 95       	com	r22
 174:	68 23       	and	r22, r24
 176:	64 bb       	out	0x14, r22	; 20
			
			/*Break from this case*/
			break;
 178:	08 95       	ret

			/*In case of INPUT_PULLUP*/
			case INPUT_PULLUP:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRC &= ~au8_pin;
 17a:	84 b3       	in	r24, 0x14	; 20
 17c:	96 2f       	mov	r25, r22
 17e:	90 95       	com	r25
 180:	89 23       	and	r24, r25
 182:	84 bb       	out	0x14, r24	; 20

			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTC |= au8_pin;
 184:	85 b3       	in	r24, 0x15	; 21
 186:	68 2b       	or	r22, r24
 188:	65 bb       	out	0x15, r22	; 21
			
			/*Break from this case*/
			break;
 18a:	08 95       	ret

		/*In case of PORTD*/
		case PORTD:
		
		/*Switching over pin status*/
		switch(au8_status)
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	41 f0       	breq	.+16     	; 0x1a0 <mdio_setPinStatus+0xb6>
 190:	18 f0       	brcs	.+6      	; 0x198 <mdio_setPinStatus+0xae>
 192:	42 30       	cpi	r20, 0x02	; 2
 194:	51 f0       	breq	.+20     	; 0x1aa <mdio_setPinStatus+0xc0>
 196:	08 95       	ret
		{
			/*In case of OUTPUT*/
			case OUTPUT:
			
			/*Set the specified pins to 1 in DDR*/
			MDIO_DDRD |= au8_pin;
 198:	81 b3       	in	r24, 0x11	; 17
 19a:	68 2b       	or	r22, r24
 19c:	61 bb       	out	0x11, r22	; 17
			
			/*Break from this case*/
			break;
 19e:	08 95       	ret
			
			/*In case of INPUT_FLOAT*/
			case INPUT_FLOAT:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRD &= ~au8_pin;
 1a0:	81 b3       	in	r24, 0x11	; 17
 1a2:	60 95       	com	r22
 1a4:	68 23       	and	r22, r24
 1a6:	61 bb       	out	0x11, r22	; 17
			
			/*Break from this case*/
			break;
 1a8:	08 95       	ret

			/*In case of INPUT_PULLUP*/
			case INPUT_PULLUP:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRD &= ~au8_pin;
 1aa:	81 b3       	in	r24, 0x11	; 17
 1ac:	96 2f       	mov	r25, r22
 1ae:	90 95       	com	r25
 1b0:	89 23       	and	r24, r25
 1b2:	81 bb       	out	0x11, r24	; 17

			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTD |= au8_pin;
 1b4:	82 b3       	in	r24, 0x12	; 18
 1b6:	68 2b       	or	r22, r24
 1b8:	62 bb       	out	0x12, r22	; 18
 1ba:	08 95       	ret

000001bc <mdio_setPinValue>:
}

void mdio_setPinValue(u8_t au8_port, u8_t au8_pin, u8_t au8_value)
{
	/*Switching over GPIO Ports*/
	switch(au8_port)
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	a1 f0       	breq	.+40     	; 0x1e8 <mdio_setPinValue+0x2c>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <mdio_setPinValue+0x10>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	f9 f0       	breq	.+62     	; 0x204 <mdio_setPinValue+0x48>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	59 f1       	breq	.+86     	; 0x220 <mdio_setPinValue+0x64>
 1ca:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
		
		/*Switching over pin values*/
		switch(au8_value)
 1cc:	44 23       	and	r20, r20
 1ce:	19 f0       	breq	.+6      	; 0x1d6 <mdio_setPinValue+0x1a>
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <mdio_setPinValue+0x24>
 1d4:	08 95       	ret
		{
			/*In case of LOW*/
			case LOW:
			
			/*Set the specified pins to 0 in PORT*/
			MDIO_PORTA &= ~au8_pin;
 1d6:	8b b3       	in	r24, 0x1b	; 27
 1d8:	60 95       	com	r22
 1da:	68 23       	and	r22, r24
 1dc:	6b bb       	out	0x1b, r22	; 27
			
			/*Break from this case*/
			break;
 1de:	08 95       	ret
			
			/*In case of HIGH*/
			case HIGH:
			
			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTA |= au8_pin;
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	68 2b       	or	r22, r24
 1e4:	6b bb       	out	0x1b, r22	; 27
			
			/*Break from this case*/
			break;
 1e6:	08 95       	ret

		/*In case of PORTB*/
		case PORTB:
		
		/*Switching over pin values*/
		switch(au8_value)
 1e8:	44 23       	and	r20, r20
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <mdio_setPinValue+0x36>
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	31 f0       	breq	.+12     	; 0x1fc <mdio_setPinValue+0x40>
 1f0:	08 95       	ret
		{
			/*In case of LOW*/
			case LOW:
			
			/*Set the specified pins to 0 in PORT*/
			MDIO_PORTB &= ~au8_pin;
 1f2:	88 b3       	in	r24, 0x18	; 24
 1f4:	60 95       	com	r22
 1f6:	68 23       	and	r22, r24
 1f8:	68 bb       	out	0x18, r22	; 24
			
			/*Break from this case*/
			break;
 1fa:	08 95       	ret
			
			/*In case of HIGH*/
			case HIGH:
			
			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTB |= au8_pin;
 1fc:	88 b3       	in	r24, 0x18	; 24
 1fe:	68 2b       	or	r22, r24
 200:	68 bb       	out	0x18, r22	; 24
			
			/*Break from this case*/
			break;
 202:	08 95       	ret

		/*In case of PORTC*/
		case PORTC:
		
		/*Switching over pin values*/
		switch(au8_value)
 204:	44 23       	and	r20, r20
 206:	19 f0       	breq	.+6      	; 0x20e <mdio_setPinValue+0x52>
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	31 f0       	breq	.+12     	; 0x218 <mdio_setPinValue+0x5c>
 20c:	08 95       	ret
		{
			/*In case of LOW*/
			case LOW:
			
			/*Set the specified pins to 0 in PORT*/
			MDIO_PORTC &= ~au8_pin;
 20e:	85 b3       	in	r24, 0x15	; 21
 210:	60 95       	com	r22
 212:	68 23       	and	r22, r24
 214:	65 bb       	out	0x15, r22	; 21
			
			/*Break from this case*/
			break;
 216:	08 95       	ret
			
			/*In case of HIGH*/
			case HIGH:
			
			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTC |= au8_pin;
 218:	85 b3       	in	r24, 0x15	; 21
 21a:	68 2b       	or	r22, r24
 21c:	65 bb       	out	0x15, r22	; 21
			
			/*Break from this case*/
			break;
 21e:	08 95       	ret

		/*In case of PORTD*/
		case PORTD:
		
		/*Switching over pin values*/
		switch(au8_value)
 220:	44 23       	and	r20, r20
 222:	19 f0       	breq	.+6      	; 0x22a <mdio_setPinValue+0x6e>
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	31 f0       	breq	.+12     	; 0x234 <mdio_setPinValue+0x78>
 228:	08 95       	ret
		{
			/*In case of LOW*/
			case LOW:
			
			/*Set the specified pins to 0 in PORT*/
			MDIO_PORTD &= ~au8_pin;
 22a:	82 b3       	in	r24, 0x12	; 18
 22c:	60 95       	com	r22
 22e:	68 23       	and	r22, r24
 230:	62 bb       	out	0x12, r22	; 18
			
			/*Break from this case*/
			break;
 232:	08 95       	ret
			
			/*In case of HIGH*/
			case HIGH:
			
			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTD |= au8_pin;
 234:	82 b3       	in	r24, 0x12	; 18
 236:	68 2b       	or	r22, r24
 238:	62 bb       	out	0x12, r22	; 18
 23a:	08 95       	ret

0000023c <mspi_init>:
		
		/*wait for 1 microsecond*/
		_delay_us(1);
	}
	
	*au8_recvData= MSPI_SPDR;
 23c:	1d b8       	out	0x0d, r1	; 13
 23e:	20 fd       	sbrc	r18, 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <mspi_init+0xa>
 242:	70 9a       	sbi	0x0e, 0	; 14
 244:	01 c0       	rjmp	.+2      	; 0x248 <mspi_init+0xc>
 246:	71 98       	cbi	0x0e, 1	; 14
 248:	60 64       	ori	r22, 0x40	; 64
 24a:	86 2b       	or	r24, r22
 24c:	44 0f       	add	r20, r20
 24e:	44 0f       	add	r20, r20
 250:	84 2b       	or	r24, r20
 252:	26 95       	lsr	r18
 254:	28 2b       	or	r18, r24
 256:	2d b9       	out	0x0d, r18	; 13
 258:	08 95       	ret

0000025a <mspi_slaveSendRecv>:
	return;
}

void mspi_slaveSendRecv(u8_t au8_sendData, u8_t* au8_recvData)
{
	if(GET_BIT(MSPI_SPSR,7))
 25a:	77 9b       	sbis	0x0e, 7	; 14
 25c:	04 c0       	rjmp	.+8      	; 0x266 <mspi_slaveSendRecv+0xc>
	{
		/*Get the received master data*/
		*au8_recvData=MSPI_SPDR;
 25e:	9f b1       	in	r25, 0x0f	; 15
 260:	fb 01       	movw	r30, r22
 262:	90 83       	st	Z, r25
		
		/*Set the new data*/
		MSPI_SPDR= au8_sendData;
 264:	8f b9       	out	0x0f, r24	; 15
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
