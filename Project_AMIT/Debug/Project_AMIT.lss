
Project_AMIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000302  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2a  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ee  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ad  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  0000214c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000525  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008c0  00000000  00000000  00002791  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003051  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#define F_CPU 16000000UL
#include "util/delay.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	/*Initializing a local variable*/
	u8_t x;
	u8_t y;
	
	/*Setting pins for the SPI*/
	mdio_setPinStatus(PORTA,PIN0,OUTPUT);
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	0e 94 a9 00 	call	0x152	; 0x152 <mdio_setPinStatus>
	mdio_setPinStatus(PORTB,PIN5|PIN7,OUTPUT);
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	60 ea       	ldi	r22, 0xA0	; 160
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	0e 94 a9 00 	call	0x152	; 0x152 <mdio_setPinStatus>
	mdio_setPinStatus(PORTB,PIN6,INPUT_FLOAT);
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	60 e4       	ldi	r22, 0x40	; 64
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 a9 00 	call	0x152	; 0x152 <mdio_setPinStatus>
	
	/*Send and Receive pins(Virtual Terminal)*/
	mdio_setPinStatus(PORTD, PIN0, INPUT_FLOAT);
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <mdio_setPinStatus>
	mdio_setPinStatus(PORTD, PIN1, OUTPUT);
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	0e 94 a9 00 	call	0x152	; 0x152 <mdio_setPinStatus>
	
	/*Just to check the above two lines is working*/
	mdio_setPinStatus(PORTC, PIN2, OUTPUT);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0e 94 a9 00 	call	0x152	; 0x152 <mdio_setPinStatus>
	
	/*Initializing the UART communication*/
	muart_init(MUART_9600_BR);
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <muart_init>
	
	/*Initializing the SPI as a Master device*/
	mspi_init(MSPI_MASTER_DEVICE,MSPI_MSB_FIRST,MSPI_SAMPLE_R_SETUP_F,MSPI_CLK_PRE_64);
  ba:	25 e0       	ldi	r18, 0x05	; 5
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <mspi_init>
	muart_recvByte(&x);
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <muart_recvByte>
	
    while (1) 
    {
		muart_recvByte(&x);
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <muart_recvByte>
		
		/*Setting it to LOW for to act as a SS pin*/
		mdio_setPinValue(PORTA,PIN0,LOW);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 12 01 	call	0x224	; 0x224 <mdio_setPinValue>
		
		/*When 'n' is sent, send 3 through the SPI to MCU2*/
		if( x == 'n')
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	8e 36       	cpi	r24, 0x6E	; 110
  e4:	d1 f4       	brne	.+52     	; 0x11a <main+0xae>
		{
			mdio_setPinValue(PORTC,PIN2,HIGH);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	64 e0       	ldi	r22, 0x04	; 4
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 12 01 	call	0x224	; 0x224 <mdio_setPinValue>
			mspi_masterSendRecv(3, &y);
  f0:	be 01       	movw	r22, r28
  f2:	6e 5f       	subi	r22, 0xFE	; 254
  f4:	7f 4f       	sbci	r23, 0xFF	; 255
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <mspi_masterSendRecv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	84 e3       	ldi	r24, 0x34	; 52
 100:	9c e0       	ldi	r25, 0x0C	; 12
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x96>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0xa0>
 10c:	00 00       	nop
			_delay_ms(250);
			mdio_setPinValue(PORTA,PIN0,HIGH);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 12 01 	call	0x224	; 0x224 <mdio_setPinValue>
 118:	da cf       	rjmp	.-76     	; 0xce <main+0x62>
		}
		
		/*When 'f' is sent, send 4 through the SPI to MCU2*/
		else if(x == 'f')
 11a:	86 36       	cpi	r24, 0x66	; 102
 11c:	c1 f6       	brne	.-80     	; 0xce <main+0x62>
		{
			mdio_setPinValue(PORTC,PIN2,LOW);
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	64 e0       	ldi	r22, 0x04	; 4
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 12 01 	call	0x224	; 0x224 <mdio_setPinValue>
			mspi_masterSendRecv(4, &y);
 128:	be 01       	movw	r22, r28
 12a:	6e 5f       	subi	r22, 0xFE	; 254
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	0e 94 61 01 	call	0x2c2	; 0x2c2 <mspi_masterSendRecv>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	84 e3       	ldi	r24, 0x34	; 52
 138:	9c e0       	ldi	r25, 0x0C	; 12
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0xce>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xd8>
 144:	00 00       	nop
			_delay_ms(250);
			mdio_setPinValue(PORTA,PIN0,HIGH);
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 12 01 	call	0x224	; 0x224 <mdio_setPinValue>
 150:	be cf       	rjmp	.-132    	; 0xce <main+0x62>

00000152 <mdio_setPinStatus>:
/************************************************************************/

void mdio_setPinStatus(u8_t au8_port, u8_t au8_pin, u8_t au8_status)
{
	/*Switching over GPIO Ports*/
	switch(au8_port)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	f9 f0       	breq	.+62     	; 0x194 <mdio_setPinStatus+0x42>
 156:	30 f0       	brcs	.+12     	; 0x164 <mdio_setPinStatus+0x12>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	a1 f1       	breq	.+104    	; 0x1c4 <mdio_setPinStatus+0x72>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	09 f4       	brne	.+2      	; 0x162 <mdio_setPinStatus+0x10>
 160:	49 c0       	rjmp	.+146    	; 0x1f4 <mdio_setPinStatus+0xa2>
 162:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
		
		/*Switching over pin status*/
		switch(au8_status)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	41 f0       	breq	.+16     	; 0x178 <mdio_setPinStatus+0x26>
 168:	18 f0       	brcs	.+6      	; 0x170 <mdio_setPinStatus+0x1e>
 16a:	42 30       	cpi	r20, 0x02	; 2
 16c:	51 f0       	breq	.+20     	; 0x182 <mdio_setPinStatus+0x30>
 16e:	08 95       	ret
		{
			/*In case of OUTPUT*/
			case OUTPUT:
			
			/*Set the specified pins to 1 in DDR*/
			MDIO_DDRA |= au8_pin;
 170:	8a b3       	in	r24, 0x1a	; 26
 172:	68 2b       	or	r22, r24
 174:	6a bb       	out	0x1a, r22	; 26
			
			/*Break from this case*/
			break;
 176:	08 95       	ret
			
			/*In case of INPUT_FLOAT*/
			case INPUT_FLOAT:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRA &= ~au8_pin;
 178:	8a b3       	in	r24, 0x1a	; 26
 17a:	60 95       	com	r22
 17c:	68 23       	and	r22, r24
 17e:	6a bb       	out	0x1a, r22	; 26
			
			/*Break from this case*/
			break;
 180:	08 95       	ret

			/*In case of INPUT_PULLUP*/
			case INPUT_PULLUP:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRA &= ~au8_pin;
 182:	8a b3       	in	r24, 0x1a	; 26
 184:	96 2f       	mov	r25, r22
 186:	90 95       	com	r25
 188:	89 23       	and	r24, r25
 18a:	8a bb       	out	0x1a, r24	; 26

			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTA |= au8_pin;
 18c:	8b b3       	in	r24, 0x1b	; 27
 18e:	68 2b       	or	r22, r24
 190:	6b bb       	out	0x1b, r22	; 27
			
			/*Break from this case*/
			break;
 192:	08 95       	ret

		/*In case of PORTB*/
		case PORTB:
		
		/*Switching over pin status*/
		switch(au8_status)
 194:	41 30       	cpi	r20, 0x01	; 1
 196:	41 f0       	breq	.+16     	; 0x1a8 <mdio_setPinStatus+0x56>
 198:	18 f0       	brcs	.+6      	; 0x1a0 <mdio_setPinStatus+0x4e>
 19a:	42 30       	cpi	r20, 0x02	; 2
 19c:	51 f0       	breq	.+20     	; 0x1b2 <mdio_setPinStatus+0x60>
 19e:	08 95       	ret
		{
			/*In case of OUTPUT*/
			case OUTPUT:
			
			/*Set the specified pins to 1 in DDR*/
			MDIO_DDRB |= au8_pin;
 1a0:	87 b3       	in	r24, 0x17	; 23
 1a2:	68 2b       	or	r22, r24
 1a4:	67 bb       	out	0x17, r22	; 23
			
			/*Break from this case*/
			break;
 1a6:	08 95       	ret
			
			/*In case of INPUT_FLOAT*/
			case INPUT_FLOAT:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRB &= ~au8_pin;
 1a8:	87 b3       	in	r24, 0x17	; 23
 1aa:	60 95       	com	r22
 1ac:	68 23       	and	r22, r24
 1ae:	67 bb       	out	0x17, r22	; 23
			
			/*Break from this case*/
			break;
 1b0:	08 95       	ret

			/*In case of INPUT_PULLUP*/
			case INPUT_PULLUP:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRB &= ~au8_pin;
 1b2:	87 b3       	in	r24, 0x17	; 23
 1b4:	96 2f       	mov	r25, r22
 1b6:	90 95       	com	r25
 1b8:	89 23       	and	r24, r25
 1ba:	87 bb       	out	0x17, r24	; 23

			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTB |= au8_pin;
 1bc:	88 b3       	in	r24, 0x18	; 24
 1be:	68 2b       	or	r22, r24
 1c0:	68 bb       	out	0x18, r22	; 24
			
			/*Break from this case*/
			break;
 1c2:	08 95       	ret

		/*In case of PORTC*/
		case PORTC:
		
		/*Switching over pin status*/
		switch(au8_status)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	41 f0       	breq	.+16     	; 0x1d8 <mdio_setPinStatus+0x86>
 1c8:	18 f0       	brcs	.+6      	; 0x1d0 <mdio_setPinStatus+0x7e>
 1ca:	42 30       	cpi	r20, 0x02	; 2
 1cc:	51 f0       	breq	.+20     	; 0x1e2 <mdio_setPinStatus+0x90>
 1ce:	08 95       	ret
		{
			/*In case of OUTPUT*/
			case OUTPUT:
			
			/*Set the specified pins to 1 in DDR*/
			MDIO_DDRC |= au8_pin;
 1d0:	84 b3       	in	r24, 0x14	; 20
 1d2:	68 2b       	or	r22, r24
 1d4:	64 bb       	out	0x14, r22	; 20
			
			/*Break from this case*/
			break;
 1d6:	08 95       	ret
			
			/*In case of INPUT_FLOAT*/
			case INPUT_FLOAT:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRC &= ~au8_pin;
 1d8:	84 b3       	in	r24, 0x14	; 20
 1da:	60 95       	com	r22
 1dc:	68 23       	and	r22, r24
 1de:	64 bb       	out	0x14, r22	; 20
			
			/*Break from this case*/
			break;
 1e0:	08 95       	ret

			/*In case of INPUT_PULLUP*/
			case INPUT_PULLUP:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRC &= ~au8_pin;
 1e2:	84 b3       	in	r24, 0x14	; 20
 1e4:	96 2f       	mov	r25, r22
 1e6:	90 95       	com	r25
 1e8:	89 23       	and	r24, r25
 1ea:	84 bb       	out	0x14, r24	; 20

			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTC |= au8_pin;
 1ec:	85 b3       	in	r24, 0x15	; 21
 1ee:	68 2b       	or	r22, r24
 1f0:	65 bb       	out	0x15, r22	; 21
			
			/*Break from this case*/
			break;
 1f2:	08 95       	ret

		/*In case of PORTD*/
		case PORTD:
		
		/*Switching over pin status*/
		switch(au8_status)
 1f4:	41 30       	cpi	r20, 0x01	; 1
 1f6:	41 f0       	breq	.+16     	; 0x208 <mdio_setPinStatus+0xb6>
 1f8:	18 f0       	brcs	.+6      	; 0x200 <mdio_setPinStatus+0xae>
 1fa:	42 30       	cpi	r20, 0x02	; 2
 1fc:	51 f0       	breq	.+20     	; 0x212 <mdio_setPinStatus+0xc0>
 1fe:	08 95       	ret
		{
			/*In case of OUTPUT*/
			case OUTPUT:
			
			/*Set the specified pins to 1 in DDR*/
			MDIO_DDRD |= au8_pin;
 200:	81 b3       	in	r24, 0x11	; 17
 202:	68 2b       	or	r22, r24
 204:	61 bb       	out	0x11, r22	; 17
			
			/*Break from this case*/
			break;
 206:	08 95       	ret
			
			/*In case of INPUT_FLOAT*/
			case INPUT_FLOAT:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRD &= ~au8_pin;
 208:	81 b3       	in	r24, 0x11	; 17
 20a:	60 95       	com	r22
 20c:	68 23       	and	r22, r24
 20e:	61 bb       	out	0x11, r22	; 17
			
			/*Break from this case*/
			break;
 210:	08 95       	ret

			/*In case of INPUT_PULLUP*/
			case INPUT_PULLUP:
			
			/*Set the specified pins to 0 in DDR*/
			MDIO_DDRD &= ~au8_pin;
 212:	81 b3       	in	r24, 0x11	; 17
 214:	96 2f       	mov	r25, r22
 216:	90 95       	com	r25
 218:	89 23       	and	r24, r25
 21a:	81 bb       	out	0x11, r24	; 17

			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTD |= au8_pin;
 21c:	82 b3       	in	r24, 0x12	; 18
 21e:	68 2b       	or	r22, r24
 220:	62 bb       	out	0x12, r22	; 18
 222:	08 95       	ret

00000224 <mdio_setPinValue>:
}

void mdio_setPinValue(u8_t au8_port, u8_t au8_pin, u8_t au8_value)
{
	/*Switching over GPIO Ports*/
	switch(au8_port)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	a1 f0       	breq	.+40     	; 0x250 <mdio_setPinValue+0x2c>
 228:	28 f0       	brcs	.+10     	; 0x234 <mdio_setPinValue+0x10>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	f9 f0       	breq	.+62     	; 0x26c <mdio_setPinValue+0x48>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	59 f1       	breq	.+86     	; 0x288 <mdio_setPinValue+0x64>
 232:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
		
		/*Switching over pin values*/
		switch(au8_value)
 234:	44 23       	and	r20, r20
 236:	19 f0       	breq	.+6      	; 0x23e <mdio_setPinValue+0x1a>
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	31 f0       	breq	.+12     	; 0x248 <mdio_setPinValue+0x24>
 23c:	08 95       	ret
		{
			/*In case of LOW*/
			case LOW:
			
			/*Set the specified pins to 0 in PORT*/
			MDIO_PORTA &= ~au8_pin;
 23e:	8b b3       	in	r24, 0x1b	; 27
 240:	60 95       	com	r22
 242:	68 23       	and	r22, r24
 244:	6b bb       	out	0x1b, r22	; 27
			
			/*Break from this case*/
			break;
 246:	08 95       	ret
			
			/*In case of HIGH*/
			case HIGH:
			
			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTA |= au8_pin;
 248:	8b b3       	in	r24, 0x1b	; 27
 24a:	68 2b       	or	r22, r24
 24c:	6b bb       	out	0x1b, r22	; 27
			
			/*Break from this case*/
			break;
 24e:	08 95       	ret

		/*In case of PORTB*/
		case PORTB:
		
		/*Switching over pin values*/
		switch(au8_value)
 250:	44 23       	and	r20, r20
 252:	19 f0       	breq	.+6      	; 0x25a <mdio_setPinValue+0x36>
 254:	41 30       	cpi	r20, 0x01	; 1
 256:	31 f0       	breq	.+12     	; 0x264 <mdio_setPinValue+0x40>
 258:	08 95       	ret
		{
			/*In case of LOW*/
			case LOW:
			
			/*Set the specified pins to 0 in PORT*/
			MDIO_PORTB &= ~au8_pin;
 25a:	88 b3       	in	r24, 0x18	; 24
 25c:	60 95       	com	r22
 25e:	68 23       	and	r22, r24
 260:	68 bb       	out	0x18, r22	; 24
			
			/*Break from this case*/
			break;
 262:	08 95       	ret
			
			/*In case of HIGH*/
			case HIGH:
			
			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTB |= au8_pin;
 264:	88 b3       	in	r24, 0x18	; 24
 266:	68 2b       	or	r22, r24
 268:	68 bb       	out	0x18, r22	; 24
			
			/*Break from this case*/
			break;
 26a:	08 95       	ret

		/*In case of PORTC*/
		case PORTC:
		
		/*Switching over pin values*/
		switch(au8_value)
 26c:	44 23       	and	r20, r20
 26e:	19 f0       	breq	.+6      	; 0x276 <mdio_setPinValue+0x52>
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	31 f0       	breq	.+12     	; 0x280 <mdio_setPinValue+0x5c>
 274:	08 95       	ret
		{
			/*In case of LOW*/
			case LOW:
			
			/*Set the specified pins to 0 in PORT*/
			MDIO_PORTC &= ~au8_pin;
 276:	85 b3       	in	r24, 0x15	; 21
 278:	60 95       	com	r22
 27a:	68 23       	and	r22, r24
 27c:	65 bb       	out	0x15, r22	; 21
			
			/*Break from this case*/
			break;
 27e:	08 95       	ret
			
			/*In case of HIGH*/
			case HIGH:
			
			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTC |= au8_pin;
 280:	85 b3       	in	r24, 0x15	; 21
 282:	68 2b       	or	r22, r24
 284:	65 bb       	out	0x15, r22	; 21
			
			/*Break from this case*/
			break;
 286:	08 95       	ret

		/*In case of PORTD*/
		case PORTD:
		
		/*Switching over pin values*/
		switch(au8_value)
 288:	44 23       	and	r20, r20
 28a:	19 f0       	breq	.+6      	; 0x292 <mdio_setPinValue+0x6e>
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	31 f0       	breq	.+12     	; 0x29c <mdio_setPinValue+0x78>
 290:	08 95       	ret
		{
			/*In case of LOW*/
			case LOW:
			
			/*Set the specified pins to 0 in PORT*/
			MDIO_PORTD &= ~au8_pin;
 292:	82 b3       	in	r24, 0x12	; 18
 294:	60 95       	com	r22
 296:	68 23       	and	r22, r24
 298:	62 bb       	out	0x12, r22	; 18
			
			/*Break from this case*/
			break;
 29a:	08 95       	ret
			
			/*In case of HIGH*/
			case HIGH:
			
			/*Set the specified pins to 1 in PORT*/
			MDIO_PORTD |= au8_pin;
 29c:	82 b3       	in	r24, 0x12	; 18
 29e:	68 2b       	or	r22, r24
 2a0:	62 bb       	out	0x12, r22	; 18
 2a2:	08 95       	ret

000002a4 <mspi_init>:
/************************************************************************/

void mspi_init(u8_t au8_spiDevType, u8_t au8_dataOrder, u8_t au8_dataTransfer_clkType, u8_t au8_clkFreq)
{
	/*Reset the control register*/
	MSPI_SPCR = 0;
 2a4:	1d b8       	out	0x0d, r1	; 13
	
	if((au8_clkFreq % 2)==0)
 2a6:	20 fd       	sbrc	r18, 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <mspi_init+0xa>
	{
		/*Enable double speed*/
		SET_BIT(MSPI_SPSR,0);
 2aa:	70 9a       	sbi	0x0e, 0	; 14
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <mspi_init+0xc>
	}
	else
	{
		/*Disable double speed*/
		CLEAR_BIT(MSPI_SPSR,1);
 2ae:	71 98       	cbi	0x0e, 1	; 14
	}
	
	/*Setting the control register parameters*/
	MSPI_SPCR = (1 << 6) | au8_spiDevType|au8_dataOrder|(au8_dataTransfer_clkType<<2) | (au8_clkFreq/2);
 2b0:	60 64       	ori	r22, 0x40	; 64
 2b2:	86 2b       	or	r24, r22
 2b4:	44 0f       	add	r20, r20
 2b6:	44 0f       	add	r20, r20
 2b8:	84 2b       	or	r24, r20
 2ba:	26 95       	lsr	r18
 2bc:	28 2b       	or	r18, r24
 2be:	2d b9       	out	0x0d, r18	; 13
 2c0:	08 95       	ret

000002c2 <mspi_masterSendRecv>:
{
	/*This variable used in timing out mechanism*/
	u8_t au8_timeOut=0;
	
	/*Set the master data*/
	MSPI_SPDR= au8_sendData;
 2c2:	8f b9       	out	0x0f, r24	; 15
	
	/*Wait until the SPI interrupt flag rises*/
	while(GET_BIT(MSPI_SPSR,7)==0 && (au8_timeOut < TIMEOUT_VALUE))
 2c4:	77 99       	sbic	0x0e, 7	; 14
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <mspi_masterSendRecv+0x18>
 2c8:	82 e3       	ldi	r24, 0x32	; 50
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	95 e0       	ldi	r25, 0x05	; 5
 2cc:	9a 95       	dec	r25
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <mspi_masterSendRecv+0xa>
 2d0:	00 00       	nop
 2d2:	77 99       	sbic	0x0e, 7	; 14
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <mspi_masterSendRecv+0x18>
 2d6:	81 50       	subi	r24, 0x01	; 1
 2d8:	c1 f7       	brne	.-16     	; 0x2ca <mspi_masterSendRecv+0x8>
		
		/*wait for 1 microsecond*/
		_delay_us(1);
	}
	
	*au8_recvData= MSPI_SPDR;
 2da:	8f b1       	in	r24, 0x0f	; 15
 2dc:	fb 01       	movw	r30, r22
 2de:	80 83       	st	Z, r24
 2e0:	08 95       	ret

000002e2 <muart_init>:
		
		/*Wait until the transmission complete*/
		while(GET_BIT(MUART_UCSRA, 6)==0);
		
		/*Clearing the Txc bit*/
		SET_BIT(MUART_UCSRA,6);	
 2e2:	1b b8       	out	0x0b, r1	; 11
 2e4:	28 e1       	ldi	r18, 0x18	; 24
 2e6:	2a b9       	out	0x0a, r18	; 10
 2e8:	26 e8       	ldi	r18, 0x86	; 134
 2ea:	20 bd       	out	0x20, r18	; 32
 2ec:	89 b9       	out	0x09, r24	; 9
 2ee:	90 bd       	out	0x20, r25	; 32
 2f0:	08 95       	ret

000002f2 <muart_recvByte>:
}

void muart_recvByte(u8_t* pu8_dataByte)
{
	/*Check if the data is unread*/
	if (GET_BIT(MUART_UCSRA,7))
 2f2:	5f 9b       	sbis	0x0b, 7	; 11
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <muart_recvByte+0xa>
	{
		/*Getting the received data*/
		*pu8_dataByte= MUART_UDR;
 2f6:	2c b1       	in	r18, 0x0c	; 12
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
